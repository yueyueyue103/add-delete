import AWSMock from 'aws-sdk-mock';
import { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';

beforeAll(() => {
  AWSMock.setSDKInstance(S3Client);
});

afterAll(() => {
  AWSMock.restore('S3');
});


it('should set 添付画像ファイルデータURL1 when 添付画像ファイル exists', async () => {
  const res = {
    添付画像ファイル: 'some_image.png', // 替换为实际的图片文件名
    添付画像ファイルパス1: 'path/to/some_image.png' // 替换为实际的图片文件路径
  };

  // 使用 aws-sdk-mock 来模拟 AWS S3 的 GetObjectCommand 响应
  AWSMock.mock('S3', 'send', {
    Body: {
      transformToString: jest.fn().mockReturnValue('base64_encoded_image_data')
    }
  });

  try {
    // 调用 setFilePath 函数
    const result = await setFilePath(res);

    // 验证模拟的 AWS S3 响应是否被正确地使用
    expect(AWSMock.spy('S3', 'send')).toHaveBeenCalledTimes(1);
    expect(AWSMock.spy('S3', 'send')).toHaveBeenCalledWith(expect.any(GetObjectCommand));
    expect(result).toHaveProperty('添付画像ファイルデータURL1', 'base64_encoded_image_data');
  } catch (error) {
    // 捕获并处理可能的错误
    fail('错误: ' + error.message);
  }
});




















--------------------------------------------------------------------------------

logger.debug('検索結果:'${JSON.stringifj(res)})

res = await setFilePath(res);
return setResponse(200,res);


async function setFilePath(res: any){
	const client_S3 = new S3Client(region: process.env.REGION});
	if(res.添付画像ファイル && res.添付画像ファイル.trim !==""){
		const image = await client_s3.send(new GetObjectCommand({
			Key:res.添付画像ファイルパス1,
			Bucket:process.env.STUDENTIMAGE_BUKET_NAME
		}));
		res.添付画像ファイルデータURL1=await image.Body?.transformToString('base64')
	}
}