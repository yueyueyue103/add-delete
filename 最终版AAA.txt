import React, { useEffect, useRef, useState } from 'react';
import Draggable from 'react-draggable';
import { Button, Modal } from 'antd';
import './c2.css'; // 引入CSS文件

const imgURL1 = 'https://syimg.3dmgame.com/uploadimg/upload/image/20230209/20230209173058_50497.jpg';
const imgURL2 = 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png';

function MyComponent() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);
  const [showDialog, setShowDialog] = useState(false);
  const [resetRotation, setResetRotation] = useState(false); // 重置旋转角度的标志

  const canvasRef1 = useRef<HTMLCanvasElement>(null);
  const canvasRef2 = useRef<HTMLCanvasElement>(null);
  const dialogCanvasRef = useRef<HTMLCanvasElement>(null);
  const [buttonClicked, setButtonClicked] = useState(false); // 按钮点击标志

  const [scale, setScale] = useState(1); // 图片的初始缩放比例
  const [rotate, setRotate] = useState(0); // 图片的初始旋转角度
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); // 鼠标位置
  const [zoomCount, setZoomCount] = useState(0); // 放大次数计数
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [dialogPosition, setDialogPosition] = useState({ x: 0, y: 0 }); // 小窗口位置
  const [dragging, setDragging] = useState(false); // 是否正在拖拽图片

  const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setDragOffset({
      x: event.clientX - dialogPosition.x,
      y: event.clientY - dialogPosition.y,
    });
  };

  const handleMouseMove = (event) => {
    if (dragging) {
      setDialogPosition({
        x: event.clientX - dragOffset.x,
        y: event.clientY - dragOffset.y,
      });
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };

  const openDialog = () => {
    setShowDialog(true);
  };

  const closeDialog = () => {
    setShowDialog(false);
  };

  const handleRotateLeft = () => {
    setRotate(rotate - 90);
    setResetRotation(false); // 取消重置旋转角度的标志
  };

  const handleRotateRight = () => {
    setRotate(rotate + 90);
    setResetRotation(false); // 取消重置旋转角度的标志
  };

  const handleZoomIn = () => {
    if (zoomCount < 5) {
      setScale(scale + 0.5);
      setZoomCount(zoomCount + 1);
    }
  };

  const handleZoomOut = () => {
    if (scale > 1) {
      setScale(scale - 0.5);
      setZoomCount(zoomCount - 1);
    }
  };

  useEffect(() => {
    const canvas1 = canvasRef1.current;
    const canvas2 = canvasRef2.current;
    const ctx1 = canvas1?.getContext('2d');
    const ctx2 = canvas2?.getContext('2d');

    const img1 = new Image();
    const img2 = new Image();

    img1.onload = () => {
      canvas1!.width = img1.width;
      canvas1!.height = img1.height;
      ctx1?.drawImage(img1, 0, 0);
    };

    img2.onload = () => {
      canvas2!.width = img2.width;
      canvas2!.height = img2.height;
      ctx2?.drawImage(img2, 0, 0);
    };

    img1.src = imgURL1;
    img2.src = imgURL2;
  }, []);

  const handleCanvasClick = (canvasRef: React.RefObject<HTMLCanvasElement>, image: string) => {
    setSelectedImage(image);
    setButtonClicked(true);
    setResetRotation(true); // 设置重置旋转角度的标志
    setRotate(0); // 重置旋转角度
    setScale(1); // 重置缩放比例
    setZoomCount(0); // 重置放大缩小计数器
  };

  const handleButtonClick = () => {
    if (buttonClicked) {
      setShowDialog(true);
    }
  };

  const handleCloseDialog = () => {
    setShowDialog(false);
    setRotate(0); // 重置旋转角度
    setScale(1); // 重置缩放比例
    setZoomCount(0); // 重置放大次数计数
  };

  useEffect(() => {
    if (showDialog && selectedImage && dialogCanvasRef.current) {
      const ctx = dialogCanvasRef.current.getContext('2d');
      const img = new Image();

      img.onload = () => {
        dialogCanvasRef.current!.width = img.width;
        dialogCanvasRef.current!.height = img.height;
        ctx?.drawImage(img, 0, 0);
      };

      img.src = selectedImage;
    }
  }, [showDialog, selectedImage]);




  // const [rotate1, setRotate1] = useState(0); // 第一张图片的旋转角度
  // const [rotate2, setRotate2] = useState(0); // 第二张图片的旋转角度
  // const [scale1, setScale1] = useState(1); // 第一张图片的缩放比例
  // const [scale2, setScale2] = useState(1); // 第二张图片的缩放比例


  // const RotateLeft = () => {
  //   if (selectedImage === imgURL1) {
  //     setRotate1((prevRotate1) => prevRotate1 - 90);
  //     setScale1(1);
  //   } else if (selectedImage === imgURL2) {
  //     setRotate2((prevRotate2) => prevRotate2 - 90);
  //     setScale2(1);
  //   }
  // };
  // const RotateRight = () => {
  //   if (selectedImage === imgURL1) {
  //     setRotate1((prevRotate1) => prevRotate1 + 90);
  //     setScale1(1);
  //   } else if (selectedImage === imgURL2) {
  //     setRotate2((prevRotate2) => prevRotate2 + 90);
  //     setScale2(1);
  //   }
  // };

  // useEffect(() => {
  //   const canvas1 = canvasRef1.current;
  //   const canvas2 = canvasRef2.current;
  //   const ctx1 = canvas1?.getContext('2d');
  //   const ctx2 = canvas2?.getContext('2d');

  //   const img1 = new Image();
  //   const img2 = new Image();


  //   img1.onload = () => {
  //     canvas1!.width = img1.width;
  //     canvas1!.height = img1.height;
  //     ctx1?.save();
  //     ctx1?.clearRect(0, 0, canvas1!.width, canvas1!.height);
  //     ctx1?.translate(canvas1!.width / 2, canvas1!.height / 2);
  //     ctx1?.rotate((rotate1 * Math.PI) / 180);
  //     ctx1?.scale(scale1, scale1);
  //     ctx1?.drawImage(img1, -canvas1!.width / 2, -canvas1!.height / 2);
  //     ctx1?.restore();
  //   };

  //   img2.onload = () => {
  //     canvas2!.width = img2.width;
  //     canvas2!.height = img2.height;
  //     ctx2?.save();
  //     ctx2?.clearRect(0, 0, canvas2!.width, canvas2!.height);
  //     ctx2?.translate(canvas2!.width / 2, canvas2!.height / 2);
  //     ctx2?.rotate((rotate2 * Math.PI) / 180);
  //     ctx2?.scale(scale2, scale2);
  //     ctx2?.drawImage(img2, -canvas2!.width / 2, -canvas2!.height / 2);
  //     ctx2?.restore();
  //   };

  //   img1.src = imgURL1;
  //   img2.src = imgURL2;
  // }, [rotate1, rotate2, scale1, scale2]);
  return (
    <div>
      <div>
        <canvas
          ref={canvasRef1}
          onClick={() => handleCanvasClick(canvasRef1, imgURL1)}
          className={selectedImage === imgURL1 ? 'selected' : ''}
          style={{ width: '500px', height: '300px' }}
        />
        <br />
        <canvas
          ref={canvasRef2}
          onClick={() => handleCanvasClick(canvasRef2, imgURL2)}
          className={selectedImage === imgURL2 ? 'selected' : ''}
          style={{ width: '500px', height: '300px' }}
        />
      </div>
      <button onClick={handleButtonClick}>显示选中图片</button>


       {/* <button onClick={RotateLeft}>左转</button>
      <button onClick={RotateRight}>右转</button> */}
      {showDialog && selectedImage && (
        <div className="image-container">
          <div className="dialog" style={{ height: 600, width: 950, overflow: 'hidden' }}>
            <div
              className="dialog-overlay"
              style={{
                position: 'relative',
                top: dialogPosition.y,
                left: dialogPosition.x,
                width: 600,
                height: 300,
              }}
            >
              <div
                className="dialog-overlay"
                onMouseDown={handleMouseDown}
                onMouseMove={handleMouseMove}
                onMouseUp={handleMouseUp}
              >
                <div className="dialog">
                  <canvas
                    ref={dialogCanvasRef}
                    className="dialog-canvas"
                    style={{
                      transform: `scale(${scale}) rotate(${resetRotation ? 0 : rotate}deg)`,
                      left: `${mousePosition.x}px`,
                      top: `${mousePosition.y}px`,
                    }}
                    height={100}
                    width={350}
                  />
                </div>
              </div>
            </div>
            <button onClick={handleRotateLeft}>Rotate Left</button>
            <button onClick={handleRotateRight}>Rotate Right</button>
            <button onClick={handleZoomIn}>Zoom In</button>
            <button onClick={handleZoomOut}>Zoom Out</button>
            <button className="close-dialog" onClick={handleCloseDialog}>
              Close Dialog
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default MyComponent;
