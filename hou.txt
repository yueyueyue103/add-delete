const mysql = require('mysql');
const express = require('express');
const app = express();

// 创建数据库连接
const connection = mysql.createConnection({
  host: 'your_database_host',
  user: 'your_database_user',
  password: 'your_database_password',
  database: 'your_database_name',
});

// 建立数据库连接
connection.connect((err) => {
  if (err) {
    console.error('数据库连接失败:', err);
  } else {
    console.log('数据库连接成功');
  }
});

// 后台路由处理函数
app.post('/api/updateData', (req, res) => {
  const { primaryKeyValue, isOn1, isOn2, isOn3 } = req.body;

  // 查询要更新记录的当前状态
  const selectSql = 'SELECT update_time FROM A WHERE 予約番号 = ?';
  const selectParams = [primaryKeyValue];

  connection.query(selectSql, selectParams, (err, selectResult) => {
    if (err) {
      console.error('查询记录状态失败:', err);
      res.status(500).send('查询记录状态失败');
    } else {
      if (selectResult.length === 0) {
        console.log('没有找到要更新的记录');
        res.send('没有找到要更新的记录');
      } else {
        const currentUpdateTime = selectResult[0].update_time;

        // 构建 SQL 更新语句和参数列表
        let sql = 'UPDATE A SET';
        const params = [];

        if (isOn1 !== null) {
          sql += ' 定期卷时间 = ?, 定期卷确认者名 = ?';
          params.push('new_value1', 'new_value2');
        }

        if (isOn2 !== null) {
          sql += ' 区间径路时间 = ?, 区间径路确认者名 = ?';
          params.push('new_value3', 'new_value4');
        }

        if (isOn3 !== null) {
          sql += ' 购入者情报时间 = ?, 购入者情报确认者名 = ?';
          params.push('new_value5', 'new_value6');
        }

        // 添加 WHERE 条件进行排他处理，并更新更新时间字段的值
        sql += ', update_time = ?';
        sql += ' WHERE 予約番号 = ?';
        params.push(new Date(), primaryKeyValue);

        // 执行 SQL 更新语句
        connection.query(sql, params, (err, updateResult) => {
          if (err) {
            console.error('更新数据失败:', err);
            res.status(500).send('更新数据失败');
          } else {
            if (updateResult.affectedRows === 0) {
              console.log('并发更新，更新数据失败');
              res.send('并发更新，更新数据失败');
            } else {
              console.log('更新数据成功');
              res.send('更新数据成功');
            }
          }
        });
      }
    }
  });
});

// 监听端口
app.listen(3000, () => {
  console.log('后台服务已启动');
});
