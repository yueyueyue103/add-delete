


import React, { useEffect, useRef, useState } from 'react';
import Draggable from 'react-draggable';
import { Button, Modal } from 'antd';
import './c2.css'; // 引入CSS文件

const imgURL1 = 'https://syimg.3dmgame.com/uploadimg/upload/image/20230209/20230209173058_50497.jpg';
const imgURL2 = 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png';

function MyComponent() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);
  const [showDialog, setShowDialog] = useState(false);

  const canvasRef1 = useRef<HTMLCanvasElement>(null);
  const canvasRef2 = useRef<HTMLCanvasElement>(null);
  const dialogCanvasRef = useRef<HTMLCanvasElement>(null);


  const [scale, setScale] = useState(1); // 图片的初始缩放比例
  const [rotate, setRotate] = useState(0); // 图片的初始旋转角度
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); // 鼠标位置
  const [zoomCount, setZoomCount] = useState(0); // 放大次数计数
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [dialogPosition, setDialogPosition] = useState({ x: 0, y: 0 }); // 小窗口位置
  const [dragging, setDragging] = useState(false); // 是否正在拖拽图片


  const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setDragOffset({
      x: event.clientX - dialogPosition.x,
      y: event.clientY - dialogPosition.y,
    });
  };

  const handleMouseMove = (event) => {
    if (dragging) {
      setDialogPosition({
        x: event.clientX - dragOffset.x,
        y: event.clientY - dragOffset.y,
      });
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };

  const openDialog = () => {
    setShowDialog(true);
  };

  const closeDialog = () => {
    setShowDialog(false);
  };

  const handleRotateLeft = () => {
    setRotate(rotate - 90);
  };

  const handleRotateRight = () => {
    setRotate(rotate + 90);
  };

  const handleZoomIn = () => {
    if (zoomCount < 5) {
      setScale(scale + 0.5);
      setZoomCount(zoomCount + 1);
    }
  };

  const handleZoomOut = () => {
    if (scale > 1) {
      setScale(scale - 0.5);
      setZoomCount(zoomCount - 1);
    }
  };
  useEffect(() => {
    const canvas1 = canvasRef1.current;
    const canvas2 = canvasRef2.current;
    const ctx1 = canvas1?.getContext('2d');
    const ctx2 = canvas2?.getContext('2d');

    const img1 = new Image();
    const img2 = new Image();

    img1.onload = () => {
      canvas1!.width = img1.width;
      canvas1!.height = img1.height;
      ctx1?.drawImage(img1, 0, 0);
    };

    img2.onload = () => {
      canvas2!.width = img2.width;
      canvas2!.height = img2.height;
      ctx2?.drawImage(img2, 0, 0);
    };

    img1.src = imgURL1;
    img2.src = imgURL2;
  }, []);

  const handleCanvasClick = (canvasRef: React.RefObject<HTMLCanvasElement>, image: string) => {
    setSelectedImage(image);
  };

  const handleButtonClick = () => {
    setShowDialog(true);
  };

  const handleCloseDialog = () => {
    setShowDialog(false);
  };

  useEffect(() => {
    if (showDialog && selectedImage && dialogCanvasRef.current) {
      const ctx = dialogCanvasRef.current.getContext('2d');
      const img = new Image();

      img.onload = () => {
        dialogCanvasRef.current!.width = img.width;
        dialogCanvasRef.current!.height = img.height;
        ctx?.drawImage(img, 0, 0);
      };

      img.src = selectedImage;
    }
  }, [showDialog, selectedImage]);

  return (
    <div>
      <div>
        <canvas
          ref={canvasRef1}
          onClick={() => handleCanvasClick(canvasRef1, imgURL1)}
          className={selectedImage === imgURL1 ? 'selected' : ''}
          style={{ width: '300px', height: '300px' }}
        />
        <br />
        <canvas
          ref={canvasRef2}
          onClick={() => handleCanvasClick(canvasRef2, imgURL2)}
          className={selectedImage === imgURL2 ? 'selected' : ''}
          style={{ width: '300px', height: '300px' }}
        />
      </div>
      <button onClick={handleButtonClick}>显示选中图片</button>
      {showDialog && selectedImage && (

        <div className="image-container" >
          <div className="dialog" style={{ height: 600, width: 950, overflow: 'hidden' }} >

            <div
              className="dialog-overlay"
              style={{
                position: 'relative',
                top: dialogPosition.y,
                left: dialogPosition.x,

                width: 600,
                height: 300,

              }}>

              <div className="dialog-overlay"
                onMouseDown={handleMouseDown}
                onMouseMove={handleMouseMove}
                onMouseUp={handleMouseUp}

              >

                <div className="dialog">
                  <canvas
                    ref={dialogCanvasRef}
                    className="dialog-canvas"
                    style={{
                      transform: `scale(${scale}) rotate(${rotate}deg)`,
                      left: `${mousePosition.x}px`,
                      top: `${mousePosition.y}px`,
                    }}
                    height={100}
                    width={350}
                  />
                </div>

              </div>
            </div>
            <button onClick={handleRotateLeft}>Rotate Left</button>
            <button onClick={handleRotateRight}>Rotate Right</button>
            <button onClick={handleZoomIn}>Zoom In</button>
            <button onClick={handleZoomOut}>Zoom Out</button>
            <button className="close-dialog" onClick={closeDialog}>
              Close Dialog </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default MyComponent;







